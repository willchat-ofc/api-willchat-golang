// Code generated by MockGen. DO NOT EDIT.
// Source: internal/data/protocols/find_chat_by_id_repository.go

// Package mock_protocols is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/willchat-ofc/api-willchat-golang/internal/domain/models"
)

// MockFindChatByIdRepository is a mock of FindChatByIdRepository interface.
type MockFindChatByIdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFindChatByIdRepositoryMockRecorder
}

// MockFindChatByIdRepositoryMockRecorder is the mock recorder for MockFindChatByIdRepository.
type MockFindChatByIdRepositoryMockRecorder struct {
	mock *MockFindChatByIdRepository
}

// NewMockFindChatByIdRepository creates a new mock instance.
func NewMockFindChatByIdRepository(ctrl *gomock.Controller) *MockFindChatByIdRepository {
	mock := &MockFindChatByIdRepository{ctrl: ctrl}
	mock.recorder = &MockFindChatByIdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFindChatByIdRepository) EXPECT() *MockFindChatByIdRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockFindChatByIdRepository) Find(chatId string) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", chatId)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockFindChatByIdRepositoryMockRecorder) Find(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFindChatByIdRepository)(nil).Find), chatId)
}
