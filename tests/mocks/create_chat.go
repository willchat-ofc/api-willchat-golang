// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecase/create_chat.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/willchat-ofc/api-willchat-golang/internal/domain/usecase"
)

// MockCreateChat is a mock of CreateChat interface.
type MockCreateChat struct {
	ctrl     *gomock.Controller
	recorder *MockCreateChatMockRecorder
}

// MockCreateChatMockRecorder is the mock recorder for MockCreateChat.
type MockCreateChatMockRecorder struct {
	mock *MockCreateChat
}

// NewMockCreateChat creates a new mock instance.
func NewMockCreateChat(ctrl *gomock.Controller) *MockCreateChat {
	mock := &MockCreateChat{ctrl: ctrl}
	mock.recorder = &MockCreateChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateChat) EXPECT() *MockCreateChatMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreateChat) Create(ownerId string) (*usecase.CreateChatOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ownerId)
	ret0, _ := ret[0].(*usecase.CreateChatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreateChatMockRecorder) Create(ownerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateChat)(nil).Create), ownerId)
}
