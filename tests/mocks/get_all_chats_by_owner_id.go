// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecase/get_all_chats_by_owner_id.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/willchat-ofc/api-willchat-golang/internal/domain/usecase"
)

// MockGetAllChatsByOwnerId is a mock of GetAllChatsByOwnerId interface.
type MockGetAllChatsByOwnerId struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllChatsByOwnerIdMockRecorder
}

// MockGetAllChatsByOwnerIdMockRecorder is the mock recorder for MockGetAllChatsByOwnerId.
type MockGetAllChatsByOwnerIdMockRecorder struct {
	mock *MockGetAllChatsByOwnerId
}

// NewMockGetAllChatsByOwnerId creates a new mock instance.
func NewMockGetAllChatsByOwnerId(ctrl *gomock.Controller) *MockGetAllChatsByOwnerId {
	mock := &MockGetAllChatsByOwnerId{ctrl: ctrl}
	mock.recorder = &MockGetAllChatsByOwnerIdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllChatsByOwnerId) EXPECT() *MockGetAllChatsByOwnerIdMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGetAllChatsByOwnerId) Get(ownerId string) ([]*usecase.GetAllChatsByOwnerIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ownerId)
	ret0, _ := ret[0].([]*usecase.GetAllChatsByOwnerIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetAllChatsByOwnerIdMockRecorder) Get(ownerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetAllChatsByOwnerId)(nil).Get), ownerId)
}
