// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecase/find_chat_by_id.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/willchat-ofc/api-willchat-golang/internal/domain/models"
)

// MockFindChatById is a mock of FindChatById interface.
type MockFindChatById struct {
	ctrl     *gomock.Controller
	recorder *MockFindChatByIdMockRecorder
}

// MockFindChatByIdMockRecorder is the mock recorder for MockFindChatById.
type MockFindChatByIdMockRecorder struct {
	mock *MockFindChatById
}

// NewMockFindChatById creates a new mock instance.
func NewMockFindChatById(ctrl *gomock.Controller) *MockFindChatById {
	mock := &MockFindChatById{ctrl: ctrl}
	mock.recorder = &MockFindChatByIdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFindChatById) EXPECT() *MockFindChatByIdMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockFindChatById) Find(id string) (*models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockFindChatByIdMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFindChatById)(nil).Find), id)
}
