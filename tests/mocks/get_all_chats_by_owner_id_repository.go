// Code generated by MockGen. DO NOT EDIT.
// Source: internal/data/protocols/get_all_chats_by_owner_id_repository.go

// Package mock_protocols is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	protocols "github.com/willchat-ofc/api-willchat-golang/internal/data/protocols"
)

// MockGetAllChatsByOwnerIdRepository is a mock of GetAllChatsByOwnerIdRepository interface.
type MockGetAllChatsByOwnerIdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllChatsByOwnerIdRepositoryMockRecorder
}

// MockGetAllChatsByOwnerIdRepositoryMockRecorder is the mock recorder for MockGetAllChatsByOwnerIdRepository.
type MockGetAllChatsByOwnerIdRepositoryMockRecorder struct {
	mock *MockGetAllChatsByOwnerIdRepository
}

// NewMockGetAllChatsByOwnerIdRepository creates a new mock instance.
func NewMockGetAllChatsByOwnerIdRepository(ctrl *gomock.Controller) *MockGetAllChatsByOwnerIdRepository {
	mock := &MockGetAllChatsByOwnerIdRepository{ctrl: ctrl}
	mock.recorder = &MockGetAllChatsByOwnerIdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllChatsByOwnerIdRepository) EXPECT() *MockGetAllChatsByOwnerIdRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGetAllChatsByOwnerIdRepository) Get(ownerId string) ([]*protocols.GetAllChatsByOwnerIdRepositoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ownerId)
	ret0, _ := ret[0].([]*protocols.GetAllChatsByOwnerIdRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetAllChatsByOwnerIdRepositoryMockRecorder) Get(ownerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetAllChatsByOwnerIdRepository)(nil).Get), ownerId)
}
